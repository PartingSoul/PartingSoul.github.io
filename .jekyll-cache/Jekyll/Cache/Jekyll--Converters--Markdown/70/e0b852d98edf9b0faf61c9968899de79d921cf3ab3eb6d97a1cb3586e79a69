I"ݚ<h3 id="一-概述">一. 概述</h3>

<p>Android Interface Define Language(接口定义语言)，可以利用该语言定义服务端与客户端通信的接口。</p>

<p>使用场景： 不同的进程间的通信并且服务端进程可以并发处理通信任务。</p>

<h3 id="二-用法">二. 用法</h3>

<h4 id="21-aidl语法">2.1 AIDL语法</h4>

<ul>
  <li>需在 <strong>aidl</strong> 文件中使用Java语法来定义接口，且该 <strong>aidl</strong> 文件应该位于<strong>src/</strong>目录下</li>
  <li>aidl文件有两种类型：接口类型以及声明类型
    <ul>
      <li>接口类型用于定义行为，具体指的是进程间通信服务端和客户端两端通信的行为(方法)</li>
      <li>声明类型指的是通信时可能会用到一些自定义的序列化对象，用于声明这些自定义对象</li>
    </ul>
  </li>
</ul>

<p>接口类型</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// IBookManager.aidl</span>
<span class="kn">package</span> <span class="nn">com.parting_soul.server</span><span class="o">;</span>

<span class="c1">// Declare any non-default types here with import statements</span>
<span class="kn">import</span> <span class="nn">com.parting_soul.server.Book</span><span class="o">;</span>


<span class="kd">interface</span> <span class="nc">IBookManager</span> <span class="o">{</span>

   <span class="kt">void</span> <span class="nf">insert</span><span class="o">(</span><span class="n">in</span>  <span class="nc">Book</span> <span class="n">book</span><span class="o">);</span>

   <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Book</span><span class="o">&gt;</span> <span class="nf">getBookLists</span><span class="o">();</span>

<span class="o">}</span>
</code></pre></div></div>

<p>声明类型 (注意声明类型的aidl文件必须和它描述的序列化实体类在同一个包名下)</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Book.aidl</span>
<span class="kn">package</span> <span class="nn">com.parting_soul.server</span><span class="o">;</span>

<span class="n">parcelable</span> <span class="nc">Book</span><span class="o">;</span>
</code></pre></div></div>

<p>支持的数据类型</p>

<ul>
  <li>Java中的基本数据类型(byte、bool、char、short、int、long、float、double)</li>
  <li>String</li>
  <li>CharSequence</li>
  <li>实现了Parcelable接口的自定义类，需要导入实体类所在的包名</li>
  <li>List：List中支持的类型必须是上述类型，接收的类型是ArrayList</li>
  <li>Map：Map中支持的类型必须是上述的类型，但不支持泛型，接收的类型始终是HashMap</li>
</ul>

<p>aidl接口定义规则：</p>

<ul>
  <li>方法可以带零个或者多个参数，有返回值或者返回void</li>
  <li>非基本类型参数都需要指明数据走向的方向标记(in、out、inout)，默认是in</li>
  <li>aidl中的代码注释都会保留到编译生成的IBinder类中</li>
  <li>可在aidl文件中定义String 常量以及int 常量(测试时发现无法声明中文字符串常量)</li>
  <li>使用@nullable注释可空参数或者返回值</li>
</ul>

<p>一个aidl的简单例子</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.parting_soul.server</span><span class="o">;</span>

<span class="c1">// Declare any non-default types here with import statements</span>
<span class="kn">import</span> <span class="nn">com.parting_soul.server.Book</span><span class="o">;</span>


<span class="kd">interface</span> <span class="nc">IBookManager</span> <span class="o">{</span>

   <span class="kd">const</span> <span class="kt">int</span> <span class="no">VERSION</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>

   <span class="kd">const</span> <span class="nc">String</span> <span class="no">AIDL_NAME</span> <span class="o">=</span> <span class="s">"Book Service"</span><span class="o">;</span>

   <span class="kt">void</span> <span class="nf">insert</span><span class="o">(</span><span class="n">in</span>  <span class="nc">Book</span> <span class="n">book</span><span class="o">);</span>

   <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Book</span><span class="o">&gt;</span> <span class="nf">getBookLists</span><span class="o">();</span>

   <span class="nc">Map</span> <span class="nf">getBookNum</span><span class="o">();</span>

   <span class="kt">void</span> <span class="nf">getFirstBook</span><span class="o">(</span><span class="n">out</span> <span class="nc">Book</span> <span class="n">book</span><span class="o">);</span>

   <span class="kt">void</span> <span class="nf">updateBookMsg</span><span class="o">(</span><span class="n">inout</span> <span class="nc">Book</span> <span class="n">book</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>in: 方法参数默认的数据流方向，客户端将参数传入aidl方法，在服务端修改传递过来的参数不会影响客户端的参数值，和值传递的效果类似</li>
  <li>out: 客户端将对象传入aidl的方法，服务端接收时，该对象没有之前的数据，修改该对象的值，会改变客户端原对象的值</li>
  <li>inout : 参数对象完整的从客户端传递到服务端，在服务端修改对象的值，会同步改变客户端对象的值，和引用传递的效果类似</li>
</ul>

<p>注： 使用out参数修饰形参时，需要为形参对应的类创建一个无参的构造方法以及readFromParcel方法；返回值不能用上述关键字修饰；基本类型以及String或者CharSequence只能用in修饰。</p>

<h4 id="22-示例">2.2 示例</h4>

<h5 id="1-创建服务端aidl文件">1. 创建服务端aidl文件</h5>

<p>首先在服务端创建aidl文件，声明要暴露出来的接口方法</p>

<p><img src="http://qagey3wv5.bkt.clouddn.com//image (5).png" alt="image5" /></p>

<p>与aidl相关的文件可以单独建立一个文件夹存放，可以方便的拷贝整个文件夹到客户端</p>

<p>在build.gradle中指明aidl以及Java类的路径</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">android</span><span class="o">{</span>
   <span class="n">sourceSets</span> <span class="o">{</span>
        <span class="n">main</span> <span class="o">{</span>
            <span class="n">java</span><span class="o">.</span><span class="na">srcDirs</span> <span class="o">=</span> <span class="o">[</span><span class="s1">'src/main/java'</span><span class="o">,</span> <span class="s1">'src/main/aidl'</span><span class="o">]</span>
            <span class="n">resources</span><span class="o">.</span><span class="na">srcDirs</span> <span class="o">=</span> <span class="o">[</span><span class="s1">'src/main/java'</span><span class="o">,</span> <span class="s1">'src/main/aidl'</span><span class="o">]</span>
            <span class="n">aidl</span><span class="o">.</span><span class="na">srcDirs</span> <span class="o">=</span> <span class="o">[</span><span class="s1">'src/main/aidl'</span><span class="o">]</span>
            <span class="n">res</span><span class="o">.</span><span class="na">srcDirs</span> <span class="o">=</span> <span class="o">[</span><span class="s1">'src/main/res'</span><span class="o">]</span>
            <span class="n">assets</span><span class="o">.</span><span class="na">srcDirs</span> <span class="o">=</span> <span class="o">[</span><span class="s1">'src/main/assets'</span><span class="o">]</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>首先是实体类</p>

<ul>
  <li>实体类若需要在aidl方法中作为参数传递，则需要实现Parcelable接口</li>
  <li>若实体类作为aidl方法形参并用out修饰时，必须创建一个无参的构造方法以及readFromParcel方法</li>
  <li>若实体类作为aidl方法形参并用inout修饰时，必须创建一个readFromParcel方法</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Book</span> <span class="kd">implements</span> <span class="nc">Parcelable</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">description</span><span class="o">;</span>

    <span class="c1">// 若aidl形参使用out修饰必须要有无参构造方法</span>
    <span class="kd">public</span> <span class="nf">Book</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">Book</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">description</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">description</span> <span class="o">=</span> <span class="n">description</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// 若aidl形参使用out,inout修饰必须要有无参构造方法</span>
    <span class="kd">protected</span> <span class="nf">Book</span><span class="o">(</span><span class="nc">Parcel</span> <span class="n">in</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">readFromParcel</span><span class="o">(</span><span class="n">in</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">readFromParcel</span><span class="o">(</span><span class="nc">Parcel</span> <span class="n">in</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">name</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">readString</span><span class="o">();</span>
        <span class="n">description</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">readString</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Creator</span><span class="o">&lt;</span><span class="nc">Book</span><span class="o">&gt;</span> <span class="no">CREATOR</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Creator</span><span class="o">&lt;</span><span class="nc">Book</span><span class="o">&gt;()</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="nc">Book</span> <span class="nf">createFromParcel</span><span class="o">(</span><span class="nc">Parcel</span> <span class="n">in</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">Book</span><span class="o">(</span><span class="n">in</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="nc">Book</span><span class="o">[]</span> <span class="nf">newArray</span><span class="o">(</span><span class="kt">int</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nc">Book</span><span class="o">[</span><span class="n">size</span><span class="o">];</span>
        <span class="o">}</span>
    <span class="o">};</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">describeContents</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">writeToParcel</span><span class="o">(</span><span class="nc">Parcel</span> <span class="n">dest</span><span class="o">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">dest</span><span class="o">.</span><span class="na">writeString</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">dest</span><span class="o">.</span><span class="na">writeString</span><span class="o">(</span><span class="n">description</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"Book{"</span> <span class="o">+</span>
                <span class="s">"name='"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span>
                <span class="s">", description='"</span> <span class="o">+</span> <span class="n">description</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span>
                <span class="sc">'}'</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在aidl文件中引用该实体类，首选需要定义声明实体类的aidl文件</p>

<p>注：该aidl文件对应的包名需和实体类的包名相同</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Book.aidl</span>
<span class="kn">package</span> <span class="nn">com.parting_soul.server</span><span class="o">;</span>

<span class="n">parcelable</span> <span class="nc">Book</span><span class="o">;</span>
</code></pre></div></div>

<p>创建服务端需要暴露给客户端的接口方法</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// IBookManager.aidl</span>
<span class="kn">package</span> <span class="nn">com.parting_soul.server</span><span class="o">;</span>

<span class="c1">// Declare any non-default types here with import statements</span>
<span class="kn">import</span> <span class="nn">com.parting_soul.server.Book</span><span class="o">;</span>


<span class="kd">interface</span> <span class="nc">IBookManager</span> <span class="o">{</span>

   <span class="kd">const</span> <span class="kt">int</span> <span class="no">VERSION</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>

   <span class="kd">const</span> <span class="nc">String</span> <span class="no">AIDL_NAME</span> <span class="o">=</span> <span class="s">"Book Service"</span><span class="o">;</span>

   <span class="kt">void</span> <span class="nf">insert</span><span class="o">(</span><span class="n">in</span>  <span class="nc">Book</span> <span class="n">book</span><span class="o">);</span>

   <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Book</span><span class="o">&gt;</span> <span class="nf">getBookLists</span><span class="o">();</span>

   <span class="nc">Map</span> <span class="nf">getBookNum</span><span class="o">();</span>

   <span class="kt">void</span> <span class="nf">getFirstBook</span><span class="o">(</span><span class="n">out</span> <span class="nc">Book</span> <span class="n">book</span><span class="o">);</span>

   <span class="kt">void</span> <span class="nf">updateBookMsg</span><span class="o">(</span><span class="n">inout</span> <span class="nc">Book</span> <span class="n">book</span><span class="o">);</span>

<span class="o">}</span>
</code></pre></div></div>

<h5 id="2-编译生成aidl对应的实现类">2. 编译生成aidl对应的实现类</h5>

<p>点击Build -&gt; Rebuild Project后会为每个aidl文件生成通信的实现类</p>

<p><img src="http://qagey3wv5.bkt.clouddn.com//image-20200521192834555.png" alt="image-20200521192834555" /></p>

<h5 id="3-创建服务端service">3. 创建服务端Service</h5>

<p>创建服务端Service，在onBind方法中返回一个IBinder对象，这个IBinder是生成的IBookManager的一个内部抽象类，实现了IBookManager接口和IBinder接口</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookManagerService</span> <span class="kd">extends</span> <span class="nc">Service</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Book</span><span class="o">&gt;</span> <span class="n">mBookSources</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

    <span class="kd">private</span> <span class="nc">IBinder</span> <span class="n">mBinder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IBookManager</span><span class="o">.</span><span class="na">Stub</span><span class="o">()</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">insert</span><span class="o">(</span><span class="nc">Book</span> <span class="n">book</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">RemoteException</span> <span class="o">{</span>
            <span class="nc">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">" insert book "</span> <span class="o">+</span> <span class="n">book</span><span class="o">);</span>
            <span class="n">mBookSources</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">book</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">getFirstBook</span><span class="o">(</span><span class="nc">Book</span> <span class="n">book</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">RemoteException</span> <span class="o">{</span>
            <span class="n">book</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"第一本书"</span><span class="o">);</span>
            <span class="n">book</span><span class="o">.</span><span class="na">setDescription</span><span class="o">(</span><span class="s">"描述"</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateBookMsg</span><span class="o">(</span><span class="nc">Book</span> <span class="n">book</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">RemoteException</span> <span class="o">{</span>
            <span class="n">book</span><span class="o">.</span><span class="na">setDescription</span><span class="o">(</span><span class="s">"更新信息"</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Book</span><span class="o">&gt;</span> <span class="nf">getBookLists</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">RemoteException</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">mBookSources</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="nc">Map</span> <span class="nf">getBookNum</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">RemoteException</span> <span class="o">{</span>
            <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">bookNumMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
            <span class="k">for</span> <span class="o">(</span><span class="nc">Book</span> <span class="n">book</span> <span class="o">:</span> <span class="n">mBookSources</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">Integer</span> <span class="n">integer</span> <span class="o">=</span> <span class="n">bookNumMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">book</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
                <span class="kt">int</span> <span class="n">bookNum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">integer</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">bookNum</span> <span class="o">=</span> <span class="n">integer</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="n">bookNum</span><span class="o">++;</span>
                <span class="n">bookNumMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">book</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">bookNum</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="n">bookNumMap</span><span class="o">;</span>
        <span class="o">}</span>

    <span class="o">};</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">IBinder</span> <span class="nf">onBind</span><span class="o">(</span><span class="nc">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">"bind service"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">mBinder</span><span class="o">;</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<h5 id="4-客户端aidl文件">4. 客户端aidl文件</h5>

<p>把服务端整个aidl文件夹拷贝到客户端，同样位于main目录下。</p>

<p><img src="http://qagey3wv5.bkt.clouddn.com//image-20200521192940431.png" alt="客户端aidl文件存放位置" /></p>

<p>同样需要指定aidl的位置</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">android</span><span class="o">{</span>
   <span class="n">sourceSets</span> <span class="o">{</span>
        <span class="n">main</span> <span class="o">{</span>
            <span class="n">java</span><span class="o">.</span><span class="na">srcDirs</span> <span class="o">=</span> <span class="o">[</span><span class="err">'</span><span class="n">src</span><span class="o">/</span><span class="n">main</span><span class="o">/</span><span class="n">java</span><span class="err">'</span><span class="o">,</span> <span class="err">'</span><span class="n">src</span><span class="o">/</span><span class="n">main</span><span class="o">/</span><span class="n">aidl</span><span class="err">'</span><span class="o">]</span>
            <span class="n">resources</span><span class="o">.</span><span class="na">srcDirs</span> <span class="o">=</span> <span class="o">[</span><span class="err">'</span><span class="n">src</span><span class="o">/</span><span class="n">main</span><span class="o">/</span><span class="n">java</span><span class="err">'</span><span class="o">,</span> <span class="err">'</span><span class="n">src</span><span class="o">/</span><span class="n">main</span><span class="o">/</span><span class="n">aidl</span><span class="err">'</span><span class="o">]</span>
            <span class="n">aidl</span><span class="o">.</span><span class="na">srcDirs</span> <span class="o">=</span> <span class="o">[</span><span class="err">'</span><span class="n">src</span><span class="o">/</span><span class="n">main</span><span class="o">/</span><span class="n">aidl</span><span class="err">'</span><span class="o">]</span>
            <span class="n">res</span><span class="o">.</span><span class="na">srcDirs</span> <span class="o">=</span> <span class="o">[</span><span class="err">'</span><span class="n">src</span><span class="o">/</span><span class="n">main</span><span class="o">/</span><span class="n">res</span><span class="err">'</span><span class="o">]</span>
            <span class="n">assets</span><span class="o">.</span><span class="na">srcDirs</span> <span class="o">=</span> <span class="o">[</span><span class="err">'</span><span class="n">src</span><span class="o">/</span><span class="n">main</span><span class="o">/</span><span class="n">assets</span><span class="err">'</span><span class="o">]</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>拷贝完成后重新build一下项目，此时会生成客户端aidl文件的实现类</p>

<h5 id="5-编写客户端与与服务端通信代码">5. 编写客户端与与服务端通信代码</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="nc">AppCompatActivity</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="nc">IBookManager</span> <span class="n">mBookManager</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">isBound</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="nc">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
        <span class="n">setContentView</span><span class="o">(</span><span class="no">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>

        <span class="c1">// 绑定服务</span>
        <span class="nc">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Intent</span><span class="o">();</span>
        <span class="n">intent</span><span class="o">.</span><span class="na">setClassName</span><span class="o">(</span><span class="s">"com.parting_soul.server"</span><span class="o">,</span> <span class="s">"com.parting_soul.server.BookManagerService"</span><span class="o">);</span>
        <span class="n">bindService</span><span class="o">(</span><span class="n">intent</span><span class="o">,</span> <span class="n">mServiceConnection</span><span class="o">,</span> <span class="nc">Context</span><span class="o">.</span><span class="na">BIND_AUTO_CREATE</span><span class="o">);</span>

    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onDestroy</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onDestroy</span><span class="o">();</span>
        <span class="n">unbindService</span><span class="o">(</span><span class="n">mServiceConnection</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="nc">View</span> <span class="n">view</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">RemoteException</span> <span class="o">{</span>
        <span class="k">switch</span> <span class="o">(</span><span class="n">view</span><span class="o">.</span><span class="na">getId</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">case</span> <span class="no">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">bt_insert</span><span class="o">:</span>
                <span class="n">insertBook</span><span class="o">();</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">case</span> <span class="no">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">bt_getBookLists</span><span class="o">:</span>
                <span class="n">getBookList</span><span class="o">();</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">case</span> <span class="no">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">bt_getBookNum</span><span class="o">:</span>
                <span class="n">getBookNum</span><span class="o">();</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">case</span> <span class="no">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">bt_getBook_first</span><span class="o">:</span>
                <span class="n">getFirstBook</span><span class="o">();</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">case</span> <span class="no">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">bt_update_book</span><span class="o">:</span>
                <span class="n">updateBook</span><span class="o">();</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">default</span><span class="o">:</span>
                <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">updateBook</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">RemoteException</span> <span class="o">{</span>
        <span class="nc">Book</span> <span class="n">book1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Book</span><span class="o">(</span><span class="s">"Java编程思想"</span><span class="o">,</span> <span class="s">"Java 书籍"</span><span class="o">);</span>
        <span class="nc">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">"更新前："</span> <span class="o">+</span> <span class="n">book1</span><span class="o">);</span>
        <span class="n">mBookManager</span><span class="o">.</span><span class="na">updateBookMsg</span><span class="o">(</span><span class="n">book1</span><span class="o">);</span>
        <span class="nc">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">"更新后："</span> <span class="o">+</span> <span class="n">book1</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">getFirstBook</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">RemoteException</span> <span class="o">{</span>
        <span class="nc">Book</span> <span class="n">book</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Book</span><span class="o">();</span>
        <span class="n">mBookManager</span><span class="o">.</span><span class="na">getFirstBook</span><span class="o">(</span><span class="n">book</span><span class="o">);</span>
        <span class="nc">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">book</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">getBookNum</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">RemoteException</span> <span class="o">{</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="n">mBookManager</span><span class="o">.</span><span class="na">getBookNum</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">map</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">map</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
                <span class="nc">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">"书籍名： "</span> <span class="o">+</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">()</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">getBookList</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">RemoteException</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Book</span><span class="o">&gt;</span> <span class="n">lists</span> <span class="o">=</span> <span class="n">mBookManager</span><span class="o">.</span><span class="na">getBookLists</span><span class="o">();</span>
        <span class="nc">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">lists</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">insertBook</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">RemoteException</span> <span class="o">{</span>
        <span class="n">mBookManager</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="k">new</span> <span class="nc">Book</span><span class="o">(</span><span class="s">"Android 开发艺术探索"</span><span class="o">,</span> <span class="s">"技术"</span><span class="o">));</span>
    <span class="o">}</span>


    <span class="kd">private</span> <span class="nc">ServiceConnection</span> <span class="n">mServiceConnection</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ServiceConnection</span><span class="o">()</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onServiceConnected</span><span class="o">(</span><span class="nc">ComponentName</span> <span class="n">name</span><span class="o">,</span> <span class="nc">IBinder</span> <span class="n">service</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">"service connected"</span><span class="o">);</span>
            <span class="n">mBookManager</span> <span class="o">=</span> <span class="nc">IBookManager</span><span class="o">.</span><span class="na">Stub</span><span class="o">.</span><span class="na">asInterface</span><span class="o">(</span><span class="n">service</span><span class="o">);</span>
            <span class="n">isBound</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onServiceDisconnected</span><span class="o">(</span><span class="nc">ComponentName</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">isBound</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">};</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="3-oneway">3. oneway</h4>

<p>aidl中定义的方法可以用oneway修饰，但是用oneway修饰后方法不能有返回值</p>

<p>oneway修饰的方法在不同场景调用的方式不同</p>

<ul>
  <li>当客户端和服务端不再同一个进程中，使用oneway修饰的方法为异步方法，客户端不用等待服务端方法执行完成，直接返回</li>
  <li>如果客户端可服务端在同一个进程中，使用oneway修饰的方法为同步方法</li>
</ul>

<p>oneway修饰方法</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// IBookManager.aidl</span>
<span class="kn">package</span> <span class="nn">com.parting_soul.server</span><span class="o">;</span>

<span class="c1">// Declare any non-default types here with import statements</span>
<span class="kn">import</span> <span class="nn">com.parting_soul.server.Book</span><span class="o">;</span>


<span class="kd">interface</span> <span class="nc">IBookManager</span> <span class="o">{</span>
 	<span class="o">....</span>

  <span class="n">oneway</span> <span class="kt">void</span> <span class="nf">getData</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

:ET